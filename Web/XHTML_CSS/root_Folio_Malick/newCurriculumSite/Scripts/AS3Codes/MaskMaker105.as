package Scripts.AS3Codes {		// ******** HOW IT WORKS ****************	// After the first sweep of the round masks, the first class containing just the Typewriter is imported ("SlogansA"),	// After the second sweep, the first class is removed, enter the second class ("ParadiseIsland101"),	// this class is holding a slide show and other classes "SlogansB, C, D" which have Typewriter effects too.		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.net.URLRequest;	import flash.media.*;			public class MaskMaker105 extends MovieClip {		private var soundReq:URLRequest;		private var soundReq1:URLRequest;		private var soundReq2:URLRequest;		private var samaSound:Sound = new Sound();		private var samaSound1:Sound = new Sound();		private var samaSound2:Sound = new Sound();		private var myChannel:SoundChannel = new SoundChannel();		private var soundSettings:SoundTransform = new SoundTransform();				// Create empty master mask that will be holding the small masking objects.		private var _masterMask:Sprite;		// Create the bottom-most graphic that will be used for dragging purposes, it resides in main FLA		private var _titleBar:TitleBar;		// Create a Close btn with a cross sign,  it resides in main FLA		private var closeBtn:Close;		// Instantiate the Backgrounds;		private var _background:Background;		private var _background1:Background1;		//private var _background2:Background2;		// Instantiate the two images that are MovieClip classes residing in the main FLA;		private var _artwork:Artwork1;		private var _beachGirl:BeachGirl;				// Create 6 different objects to be used as masks inside the Master Mask;		private var _circle:Circle;		private var _circle01:Circle;		private var _circle02:Circle;		private var _circle03:Circle;		private var _circle04:Circle;		private var _circle05:Circle;						// Create the initial x and y positions for each object in the first animation;		private var Xpos:Number = 0;		private var Ypos:Number = 35;		private var Ypos1:Number = 100;		private var Ypos2:Number = 150;		private var Ypos3:Number = 200;		private var Ypos4:Number = 250;		private var Ypos5:Number = 300;				// Initial x position of each object for the second animation;		private var Xpos1:Number = 700;							// *************** TIMERS ************************		private var masterTimer:Timer = new Timer(2000, 1);  // Create the master Timer that kills the masks		private var circleTimer:Timer = new Timer(70);  // Create Timer object to generate the masking objects;		private var animTimer:Timer = new Timer(4000, 1);  // Create a Timer to control the slogans with the typewriter effect;		// This Timer will wait for the whole animation to finish before showing the close Btn,		// You're using this trick to avoid error when closing prematurely. (you'll fix it later on)		private var closingTimer:Timer = new Timer(23000, 1); 				// Drop Shadow for the whole window		private var myShadow:DropShadowFilter;		private var myShadow1:DropShadowFilter;				// INSTANTIATE THE FIRST IMPORTED SLOGAN CLASS WHICH CONTAIN THE TYPEWRITER EFFECT. 		// All the others typed text are part of the last imported class "ParadiseIsland101";		private var _slogan1:SlogansA;						// Create an instance of the Class containing the rest of the typed text and slide show		private var _paradise:ParadiseIsland101;						public function MaskMaker105() {			// Create the bottom-most layer that will be dragged			_titleBar = new TitleBar();			addChild(_titleBar);						// The white Bgd of the "_titleBar" is not suitable, cover it with this artificial Bgd			_background1 = new Background1;			addChild(_background1);			_background1.x = 1;			_background1.y = 20;									// Set drop shadows			myShadow  = new DropShadowFilter(25, 25, 0x000000, .3, 20, 20);			_titleBar.filters = new Array(myShadow);			myShadow1 = new DropShadowFilter(25, 25, 0x000000, .5, 20, 20);						// Drag the whole window			_titleBar.buttonMode = true;			_titleBar.addEventListener(MouseEvent.MOUSE_DOWN, dragstart);			_titleBar.addEventListener(MouseEvent.MOUSE_OUT, dragstop);			_titleBar.addEventListener(MouseEvent.MOUSE_UP, dragstop);						// Pull Artwork1 image from the library of the main movie and put an instance of it on the stage;			_artwork = new Artwork1();			addChild(_artwork);			_artwork.x = 1;			_artwork.y = 20;						// Create the first master mask			_masterMask = new Sprite();			addChild(_masterMask);			_masterMask.x = 1;			_masterMask.y = 20;										// Mask the image			_artwork.mask = _masterMask;						// Instantiate Sound Objects creating noise for the Gloomy City			soundReq = new URLRequest("sounds/179.mp3");			samaSound.load(soundReq);			soundSettings.volume = .2;			myChannel = samaSound.play(1, 1, soundSettings);						soundReq1 = new URLRequest("sounds/ambulancelip36.mp3");			samaSound1.load(soundReq1);			soundSettings.volume = .2;			myChannel = samaSound1.play(1, 1, soundSettings);						// Start Timer			circleTimer.start();			circleTimer.addEventListener(TimerEvent.TIMER, duplicate);						// SWAP THE DEPTH of this application on the stage of the main movie (Check out the syntax).			this.addEventListener(MouseEvent.CLICK, swapLevel);					}						private function swapLevel(myEvent:MouseEvent):void {			this.parent.addChild(this);		}						private function dragstart(myEvent:MouseEvent):void {			myEvent.target.parent.startDrag();			_titleBar.filters = new Array(myShadow1);		}				private function dragstop(myEvent:MouseEvent):void {			myEvent.target.stopDrag();			_titleBar.filters = new Array(myShadow);		}						private function duplicate(myEvent:TimerEvent):void {				// Populate the mask				_circle = new Circle();				_masterMask.addChild(_circle);				_circle.x = Xpos;				_circle.y = Ypos;								_circle01 = new Circle();				_masterMask.addChild(_circle01);				_circle01.x = Xpos;				_circle01.y = Ypos1;								_circle02 = new Circle();				_masterMask.addChild(_circle02);				_circle02.x = Xpos;				_circle02.y = Ypos2;								_circle03 = new Circle();				_masterMask.addChild(_circle03);				_circle03.x = Xpos;				_circle03.y = Ypos3;								_circle04 = new Circle();				_masterMask.addChild(_circle04);				_circle04.x = Xpos;				_circle04.y = Ypos4;								_circle05 = new Circle();				_masterMask.addChild(_circle05);				_circle05.x = Xpos;				_circle05.y = Ypos5;								// Continually increase the x position of the duplicate movie clips.				Xpos += 60;				if(Xpos > 750) {					Xpos = 700;					circleTimer.removeEventListener(TimerEvent.TIMER, duplicate);					// This Timer will wait 2 seconds B4 removing the first Mask (_masterMask) and its content; it plays just once.					masterTimer.start();					masterTimer.addEventListener(TimerEvent.TIMER, removeMask);										//trace(_masterMask.numChildren);				}						}				private function removeMask(myEvent:TimerEvent):void {			// THIS DOESN'T REMOVE THE MASK AND ITS CONTENTS, BUT THE "FOR" LOOP DOES;			//this.removeChild(this._masterMask);						// Remove the artificial Bgd			removeChildAt(1);						// Remove the Timer			masterTimer.removeEventListener(TimerEvent.TIMER, removeMask);						// Disassociate the image from the mask object before it is removed			_artwork.mask = null;						// Store all the children of the Mask for a quick removal			var count:int = _masterMask.numChildren;						// Remove the mask with all its contents			for(var i:int = 0; i < count; i++) {				_masterMask.removeChildAt(0);			}			//trace(_masterMask.numChildren);						// Now insert the imported "SlogansA" class to display the typing of text.			_slogan1 = new SlogansA();			addChild(_slogan1);									animTimer.start();			animTimer.addEventListener(TimerEvent.TIMER, resumeAnim);		}								private function resumeAnim(myEvent:TimerEvent):void {			// Load the image of beach girl.			_beachGirl = new BeachGirl();			addChild(_beachGirl);			_beachGirl.x = 1;			_beachGirl.y = 20;						// You have to create a new instance of the same mask you've just destroyed, otherwise if you use addChild() again, 			// the compiler will reuse the instance you destroyed with all its content, I think it is still residing somewhere in the computer's memory; 			_masterMask = new Sprite();			this.addChild(_masterMask);			_masterMask.x = 1;			_masterMask.y = 20;						// Mask the _beachGirl image			_beachGirl.mask = _masterMask;						animTimer.removeEventListener(TimerEvent.TIMER, resumeAnim);						circleTimer.start();			circleTimer.addEventListener(TimerEvent.TIMER, duplicate1);						// SECOND SOUND OBJECTS			// Stop the previous sounds first			myChannel.stop();			// Play Ambient Island Sound			soundReq2 = new URLRequest("sounds/Island_Fever.mp3");			samaSound2.load(soundReq2);			myChannel = samaSound2.play(1, 100, soundSettings);					}				private function duplicate1(myEvent:TimerEvent):void {			// Populate the mask again with the same objects in a reverse way;						_circle = new Circle();			_masterMask.addChild(_circle);			_circle.x = Xpos1;			_circle.y = Ypos;						_circle01 = new Circle();			_masterMask.addChild(_circle01);			_circle01.x = Xpos1;			_circle01.y = Ypos1;						_circle02 = new Circle();			_masterMask.addChild(_circle02);			_circle02.x = Xpos1;			_circle02.y = Ypos2;						_circle03 = new Circle();			_masterMask.addChild(_circle03);			_circle03.x = Xpos1;			_circle03.y = Ypos3;						_circle04 = new Circle();			_masterMask.addChild(_circle04);			_circle04.x = Xpos1;			_circle04.y = Ypos4;						_circle05 = new Circle();			_masterMask.addChild(_circle05);			_circle05.x = Xpos1;			_circle05.y = Ypos5;						// Continually decrease the x position of the duplicate movie clips in reverse.			Xpos1 -= 60;			if(Xpos1 < -50) {				Xpos1 = 0;				circleTimer.removeEventListener(TimerEvent.TIMER, duplicate1);								// trace(_slogan1.numChildren);				// If you trace _slogan1 it give you "1" which means I guess one Class, 				// but you have to know that class is holding many items that are sitting on the stage,				// So by removing that one class fortunately, they'll all be gone;				_slogan1.removeChildAt(0);				masterTimer.addEventListener(TimerEvent.TIMER, removeMask1);				masterTimer.start();			}					}				private function removeMask1(myEvent:TimerEvent):void {			// Remove Timer			masterTimer.removeEventListener(TimerEvent.TIMER, removeMask1);						// Bring in the next class holding other classes with slide show and Typings.			_paradise = new ParadiseIsland101();			addChild(_paradise);			_paradise.x = 1;			_paradise.y = 20;						// Remove bottom image; since you removed the mask, you will not be able to see this image, but it still there.			// if you use the null property on it, you will see it			removeChild(_beachGirl);						// Remove the gloomy City from stage, the loaded Class' blue Bgd should prevail			removeChild(_artwork);						// Store all the children of the Mask for a quick removal			var count:int = _masterMask.numChildren;			// Remove the mask with all its contents			for(var i:int = 0; i < count; i++) {				_masterMask.removeChildAt(0);			}			//trace(_masterMask.numChildren);						// This Timer will show at last the "close" Btn			closingTimer.addEventListener(TimerEvent.TIMER, showCloseBtn);			closingTimer.start();		}				private function showCloseBtn(myEvent:TimerEvent):void {			closingTimer.removeEventListener(TimerEvent.TIMER, showCloseBtn);			// Instantiate the close btn			closeBtn = new Close();			closeBtn.x = 660;			closeBtn.y = 6;			addChild(closeBtn);			// Action to close window			closeBtn.addEventListener(MouseEvent.CLICK, closeWindow);		}				private function closeWindow(myEvent:MouseEvent):void {				// COME BACK LATER ON TO SEE WHY YOU CANNOT KILL THE EXTERNAL TIMERS WITH THE TYPEWRITER;				// TO AVOID TROUBLE YOU'VE MADE THE CLOSE BTN APPEAR WHEN EVERYTHING HAS FINALLY LOADED;								// ******* THIS IS HOW THE WHOLE THING BREAKS DOWN. *************				// This Btn will remove the main Class (meaning the draggable window) from the stage of the main movie while				// making sure that the sound of the loaded Classes (Typewriter Effects) inside this main Class won't play;				// "myEvent.target" means "closeBtn".MaskMaker104(the Class itself, that is this doc).Stage(of MainMovie.swf which is the parent of the object to be 				// removed, that is the Class).removeChild();				// Now that you have addressed the parent, target the child: "closeBtn.myContainer.MaskMaker104"; 				myEvent.target.parent.parent.removeChild(myEvent.target.parent);								// Stop the sound when the window is closed after the sound has already started;				myChannel.stop();								//myEvent.target.parent.removeChild(_slogan1);				//myEvent.target.parent.removeChild(_paradise);								// Even if you remove the imported Classes, their Timers will still be firing events until they finish their tasks,				// that's why you will hear the Typewriter in action although the window has disappeared.				// To avoid this, target the Timers from their respective classes and make them stop,				// and beforehand those Timers and the Classes they reside in, have to have "public" attributes; 				// ex: ("_slogan2" is a class, "_scribeTimer" resides in it, they both must start with "public var" in their definitions);				/*myEvent.target.parent._slogan1._scribeTimer.stop()				myEvent.target.parent._paradise._slogan2._scribeTimer.stop();				myEvent.target.parent._paradise._slogan3._scribeTimer.stop();				myEvent.target.parent._paradise._slogan4._scribeTimer.stop();*/								// THIS ONE TOO DOESN'T WORK				//myEvent.target.parent._slogan1.TimerEvent.stopImmediatePropagation();							// I DON'T THINK THIS WILL BE NECESSARY SINCE THE WHOLE WINDOW AND ITS CONTENT ARE BEING REMOVED ANYWAY.			// Store all the children of the Mask for a quick removal			var count:int = _paradise.numChildren;			// Remove the mask with all its contents			for(var i:int = 0; i < count; i++) {				_paradise.removeChildAt(0);			}			// Make sure there will be no single invisible object from the imported Classes left on the stage when the draggable window is removed;			/*trace(_paradise._slogan2.numChildren);			trace(_paradise._slogan3.numChildren);			trace(_paradise._slogan4.numChildren);*/		}					}}