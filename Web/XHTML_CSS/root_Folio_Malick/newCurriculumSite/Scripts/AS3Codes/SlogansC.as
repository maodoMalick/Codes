package Scripts.AS3Codes{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.media.SoundTransform;	public class SlogansC extends MovieClip {		// Create a main container to hold all the animated characters.		private var _letterBox:Sprite;		// This transparent MC is used to separate the words; it resides in the main movie "MaskMaker".		private var _whiteSpace:WhiteSpace;		// Create the characters which are MCs also residing in MaskMaker's library.		private var _P:LetterP;		private var _l:letter_l;		private var _a:letter_a;		private var _c:letter_c;		private var _e:letter_e;		private var _s:letter_s;		private var _w:letter_w;		private var _h:letter_h;		private var _e1:letter_e;		private var _r:letter_r;		private var _e2:letter_e;				private var _t:letter_t;		private var _h1:letter_h;		private var _e3:letter_e;				private var _w1:letter_w;		private var _e4:letter_e;		private var _a1:letter_a;		private var _t1:letter_t;		private var _h2:letter_h;		private var _e5:letter_e;		private var _r1:letter_r;		private var _i:letter_i;		private var _s1:letter_s;		private var _a2:letter_a;		private var _l1:letter_l;		private var _w2:letter_w;		private var _a3:letter_a;		private var _y1:letter_y;		private var _s2:letter_s;		private var _w3:letter_w;		private var _a4:letter_a;		private var _r2:letter_r;		private var _m:letter_m;		private var _a5:letter_a;		private var _n:letter_n;		private var _d:letter_d;				private var _t2:letter_t;		private var _h3:letter_h;		private var _e6:letter_e;				private var _s3:letter_s;		private var _e7:letter_e;		private var _a6:letter_a;				private var _a7:letter_a;		private var _l2:letter_l;		private var _w4:letter_w;		private var _a8:letter_a;		private var _y2:letter_y;		private var _s4:letter_s;				private var _b:letter_b;		private var _l3:letter_l;		private var _u:letter_u;		private var _e8:letter_e;						// Set the position of the characters 		private var _charX:Number = 0;		private var _charY:Number = 80;		private var _charX1:Number = 0;		private var _charY1:Number = 110.1;		private var _charX2:Number = 0;		private var _charY2:Number = 140.2;				private var _charX3:Number = 0;		private var _charY3:Number = 170.3				// Create sound object from the main movie;		private var _typingSound:Typewriter;		// Create settings for volume		private var soundSettings = SoundTransform;		// Create an Array		private var _alphabetArray:Array = new Array();		private var _index:Number = 0;		// IN ORDER TO BE ACCESSED BY OTHER CLASSES, THESE TIMERS NEED TO HAVE PUBLIC ATTRIBUTES, OTHERWISE THEY KEEP ON GENERATING THE TYPING SOUND		public var _scribeTimer:Timer = new Timer(40);		public var _timeBreaker:Timer = new Timer(1000, 1);		public function SlogansC() {			// Instantiate the container and place it to the far right of the screen;			_letterBox = new Sprite;			addChild(_letterBox);			_letterBox.x = 410;			// Instantiate the white space object			_whiteSpace = new WhiteSpace();						// Instantiate the sound object			_typingSound = new Typewriter();			// Lower the sound volume			soundSettings = new SoundTransform();			soundSettings.volume = .05;			// Instantiate the characters forming the words; you have to append a number to those characters that are called twice or more;			_P = new LetterP;			_l = new letter_l;			_a = new letter_a;			_c = new letter_c;			_e = new letter_e;			_s = new letter_s;				_w = new letter_w;			_h = new letter_h;			_e1 = new letter_e;			_r = new letter_r;			_e2 = new letter_e;						_t = new letter_t;			_h1 = new letter_h;			_e3 = new letter_e;						_w1 = new letter_w;			_e4 = new letter_e;			_a1 = new letter_a;			_t1 = new letter_t;			_h2 = new letter_h;			_e5 = new letter_e;			_r1 = new letter_r;				_i = new letter_i;			_s1 = new letter_s;				_a2 = new letter_a;			_l1 = new letter_l;			_w2 = new letter_w;			_a3 = new letter_a;			_y1 = new letter_y;			_s2 = new letter_s;				_w3 = new letter_w;			_a4 = new letter_a;			_r2 = new letter_r;			_m = new letter_m;				_a5 = new letter_a;			_n = new letter_n;			_d = new letter_d;						_t2 = new letter_t;			_h3 = new letter_h;			_e6 = new letter_e;						_s3 = new letter_s;			_e7 = new letter_e;			_a6 = new letter_a;						_a7 = new letter_a;			_l2 = new letter_l;			_w4 = new letter_w;			_a8 = new letter_a;			_y2 = new letter_y;			_s4 = new letter_s;						_b = new letter_b;			_l3 = new letter_l;			_u = new letter_u;			_e8 = new letter_e;			// Populate the Array			_alphabetArray[0] = _P;			_alphabetArray[1] = _l;			_alphabetArray[2] = _a;			_alphabetArray[3] = _c;			_alphabetArray[4] = _e;			_alphabetArray[5] = _s;			_alphabetArray[6] = _whiteSpace;			_alphabetArray[7] = _w;			_alphabetArray[8] = _h;			_alphabetArray[9] = _e1;			_alphabetArray[10] = _r;			_alphabetArray[11] = _e2;			_alphabetArray[12] = _whiteSpace;			_alphabetArray[13] = _t;			_alphabetArray[14] = _h1;			_alphabetArray[15] = _e3;			_alphabetArray[16] = _whiteSpace;			_alphabetArray[17] = _w1;			_alphabetArray[18] = _e4;			_alphabetArray[19] = _a1;			_alphabetArray[20] = _t1;			_alphabetArray[21] = _h2;			_alphabetArray[22] = _e5;			_alphabetArray[23] = _r1;			_alphabetArray[24] = _whiteSpace;			_alphabetArray[25] = _i;			_alphabetArray[26] = _s1;			_alphabetArray[27] = _whiteSpace;			_alphabetArray[28] = _a2;			_alphabetArray[29] = _l1;			_alphabetArray[30] = _w2;			_alphabetArray[31] = _a3;			_alphabetArray[32] = _y1;			_alphabetArray[33] = _s2;			_alphabetArray[34] = _whiteSpace;			_alphabetArray[35] = _w3;			_alphabetArray[36] = _a4;			_alphabetArray[37] = _r2;			_alphabetArray[38] = _m;			_alphabetArray[39] = _whiteSpace;			_alphabetArray[40] = _a5;			_alphabetArray[41] = _n;			_alphabetArray[42] = _d;			_alphabetArray[43] = _whiteSpace;			_alphabetArray[44] = _t2;			_alphabetArray[45] = _h3;			_alphabetArray[46] = _e6;			_alphabetArray[47] = _whiteSpace;			_alphabetArray[48] = _s3;			_alphabetArray[49] = _e7;			_alphabetArray[50] = _a6;			_alphabetArray[51] = _whiteSpace;			_alphabetArray[52] = _a7;			_alphabetArray[53] = _l2;			_alphabetArray[54] = _w4;			_alphabetArray[55] = _a8;			_alphabetArray[56] = _y2;			_alphabetArray[57] = _s4;			_alphabetArray[58] = _whiteSpace;			_alphabetArray[59] = _b;			_alphabetArray[60] = _l3;			_alphabetArray[61] = _u;			_alphabetArray[62] = _e8;									// Start the Timer			_scribeTimer.addEventListener(TimerEvent.TIMER, startTyping);			_scribeTimer.start();		}				private function startTyping(myEvent:TimerEvent):void {			// Put the Array in a variable for easier handling			var _character:Sprite = _alphabetArray[_index];			_letterBox.addChild(_character);			// Reduce the size of the characters to make them fit the space;			_character.scaleX = .7;			_character.scaleY = .7;			_character.x = _charX;			_character.y = _charY;			// Play typing sound			_typingSound.play(1, 0, soundSettings);			// Increase the Array index.			_index++;			// Move the newly added character to the right.			_charX += 15;			if (_charX >= 255) {				// You have to be exact on the numbers you specify in the "if statement", otherwise the compiler will thhrow errors;				// Kill the timer and start a new one.				_scribeTimer.removeEventListener(TimerEvent.TIMER, startTyping);				// Run the _timeBreaker Timer to create in between silence.				_timeBreaker.addEventListener(TimerEvent.TIMER, silence);				_timeBreaker.start();			}		}				private function silence(myEvent:TimerEvent):void {			_timeBreaker.removeEventListener(TimerEvent.TIMER, silence);			// After one second remove the silent timer and restart typing.			_scribeTimer.addEventListener(TimerEvent.TIMER, resumeTyping);			//_scribeTimer.start();		}				private function resumeTyping(myEvent:TimerEvent):void {			var _character:Sprite = _alphabetArray[_index];			_letterBox.addChild(_character);			// Reduce the size of the characters to make them fit the space;			_character.scaleX = .7;			_character.scaleY = .7;			_character.x = _charX1;			_character.y = _charY1;			_typingSound.play(1, 0, soundSettings);			_index++;			_charX1 += 15;			if (_charX1 >= 270) {				_scribeTimer.removeEventListener(TimerEvent.TIMER, resumeTyping);				// Create silence again				_timeBreaker.addEventListener(TimerEvent.TIMER, silence1);				_timeBreaker.start();			}		}				private function silence1(myEvent:TimerEvent):void {			_timeBreaker.removeEventListener(TimerEvent.TIMER, silence1);			// After one second remove the silent timer and restart typing.			_scribeTimer.addEventListener(TimerEvent.TIMER, resumeTyping1);			_scribeTimer.start();		}				private function resumeTyping1(myEvent:TimerEvent):void {			var _character:Sprite = _alphabetArray[_index];			_letterBox.addChild(_character);			// Reduce the size of the characters to make them fit the space;			_character.scaleX = .7;			_character.scaleY = .7;			_character.x = _charX2;			_character.y = _charY2;			_typingSound.play(1, 0, soundSettings);			_index++;			_charX2 += 15;			if (_charX2 >= 255) {				_scribeTimer.removeEventListener(TimerEvent.TIMER, resumeTyping1);				// Create silence again				_timeBreaker.addEventListener(TimerEvent.TIMER, silence2);				_timeBreaker.start();			}		}				private function silence2(myEvent:TimerEvent):void {			_timeBreaker.removeEventListener(TimerEvent.TIMER, silence2);			// After one second remove the silent timer and restart typing.			_scribeTimer.addEventListener(TimerEvent.TIMER, resumeTyping2);			//_scribeTimer.start();		}				private function resumeTyping2(myEvent:TimerEvent):void {			var _character:Sprite = _alphabetArray[_index];			_letterBox.addChild(_character);			// Reduce the size of the characters to make them fit the space;			_character.scaleX = .7;			_character.scaleY = .7;			_character.x = _charX3;			_character.y = _charY3;			_typingSound.play(1, 0, soundSettings);			_index++;			_charX3 += 15;			if (_charX3 >= 165) {				_scribeTimer.removeEventListener(TimerEvent.TIMER, resumeTyping2);			}					}			}	}